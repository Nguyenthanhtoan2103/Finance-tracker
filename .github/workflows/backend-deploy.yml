# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow integrates njsscan with GitHub's Code Scanning feature
# nodejsscan is a static security code scanner that finds insecure code patterns in your Node.js applications

name: CI/CD to Windows VPS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Check SSH secrets
        run: |
          set -eux
          echo "VPS host is: ${{ secrets.VPS_HOST }}"
          echo "VPS username is: ${{ secrets.VPS_USER }}"
          if [ -n "${{ secrets.VPS_PRIVATE_KEY }}" ]; then
            echo "Private key is set"
          else
            echo "Private key is missing"
          fi


      - name: Build Docker image
        run: |
          set -eux
          echo "Starting Docker build..."
          docker build -t ghcr.io/nguyenthanhtoan2103/finance-tracker:latest ./backend
          echo "Docker build finished."

      - name: Login to GHCR
        run: |
          set -eux
          echo "Logging in to GitHub Container Registry..."
          echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          echo "Login successful."

      - name: Push Docker image
        run: |
          set -eux
          echo "Pushing Docker image to GHCR..."
          docker push ghcr.io/nguyenthanhtoan2103/finance-tracker:latest
          echo "Push finished."

      - name: Deploy to Windows VPS via SSH
        uses: garygrossgarten/github-action-ssh@release
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          privateKey: ${{ secrets.VPS_PRIVATE_KEY }}
          port: 22
          command: |
            echo "Starting deployment on VPS..."
            cd C:\\finance-tracker
            echo "Pulling latest Docker images..."
            docker compose pull
            echo "Starting containers..."
            docker compose up -d --build
            echo "Deployment completed!"
