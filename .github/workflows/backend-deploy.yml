# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow integrates njsscan with GitHub's Code Scanning feature
# nodejsscan is a static security code scanner that finds insecure code patterns in your Node.js applications

name: ci/cd backend to ubuntu

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. checkout repository
      - name: checkout repository
        uses: actions/checkout@v3

      # 2. set up docker buildx
      - name: set up docker buildx
        uses: docker/setup-buildx-action@v2

      # 3. login ghcr
      - name: log in to ghcr
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.ghcr_pat }}

      # 4. build docker image
      - name: build docker image
        run: |
          repo_name=$(echo ${{ github.repository }} | cut -d'/' -f2 | tr '[:upper:]' '[:lower:]')
          full_image="ghcr.io/${{ github.repository_owner }}/$repo_name-backend:latest"
          echo "docker image: $full_image"
          docker build -t $full_image ./backend

      # 5. push docker image
      - name: push docker image
        run: |
          docker push $full_image

      # 6. deploy to vps via ssh
      - name: deploy to vps
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.vps_host }}
          username: ${{ secrets.vps_user }}
          key: ${{ secrets.vps_private_key }}
          port: 22
          script: |
            full_image="ghcr.io/${GITHUB_REPOSITORY_OWNER}/$(echo $GITHUB_REPOSITORY | cut -d'/' -f2 | tr '[:upper:]' '[:lower:]')-backend:latest"
            echo "deploy docker image: $full_image"

            # login ghcr trên server
            echo "${{ secrets.ghcr_pat }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # pull image mới nhất
            docker pull $full_image

            # stop container cũ nếu có
            docker stop backend || true
            docker rm backend || true

            # run container mới (backend port 5000)
            docker run -d --name backend -p 5000:5000 $full_image

