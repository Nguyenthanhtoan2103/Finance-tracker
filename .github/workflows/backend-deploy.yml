# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow integrates njsscan with GitHub's Code Scanning feature
# nodejsscan is a static security code scanner that finds insecure code patterns in your Node.js applications

name: CI/CD Backend to Ubuntu

on:
  push:
    branches:
      - main

jobs:
  backend-deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Build Docker image
      - name: Build Docker image
        run: |
          repo_name=$(echo "${GITHUB_REPOSITORY}" | cut -d'/' -f2 | tr '[:upper:]' '[:lower:]')
          full_image="ghcr.io/Nguyenthanhtoan2103/$repo_name-backend:latest"
          echo "Docker image: $full_image"
          docker build -t $full_image ./backend

      # 3. Login to GitHub Container Registry
      - name: Login to GHCR
        run: |
          echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u Nguyenthanhtoan2103 --password-stdin

      # 4. Push Docker image
      - name: Push Docker image
        run: |
          repo_name=$(echo "${GITHUB_REPOSITORY}" | cut -d'/' -f2 | tr '[:upper:]' '[:lower:]')
          full_image="ghcr.io/Nguyenthanhtoan2103/$repo_name-backend:latest"
          docker push $full_image

      # 5. Deploy to VPS via SSH
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_PRIVATE_KEY }}
          port: 22
          script: |
            repo_name=$(echo "${GITHUB_REPOSITORY}" | cut -d'/' -f2 | tr '[:upper:]' '[:lower:]')
            full_image="ghcr.io/Nguyenthanhtoan2103/$repo_name-backend:latest"
            echo "Deploy Docker image: $full_image"
            echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u Nguyenthanhtoan2103 --password-stdin
            docker pull $full_image
            docker stop backend || true
            docker rm backend || true
            docker run -d --name backend -p 5000:5000 $full_image
